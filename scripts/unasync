#!/usr/bin/env uv run --script

import os
import re
import sys

SUBS = [
    # builtins
    ("async def", "def"),
    ("async with", "with"),
    ("await ", ""),
    ("async for", "for"),
    ("__aiter__", "__iter__"),
    ("AsyncIterator", "Iterator"),
    ("AsyncIterable", "Iterable"),
    ("@pytest.mark.anyio", ""),
    (r"Awaitable\[([^\]]+)\]", r"\1"),
    # our public API
    ("AsyncCacheProxy", "SyncCacheProxy"),
    ("AsyncBaseStorage", "SyncBaseStorage"),
    ("AsyncHishelClient", "SyncHishelClient"),
    ("AsyncSqliteStorage", "SyncSqliteStorage"),
    ("anysqlite", "sqlite3"),
    ("aiter_stream", "iter_stream"),
    ("aiter_raw", "iter_raw"),
    ("aprint_sqlite_state", "print_sqlite_state"),
    ("make_async_iterator", "make_sync_iterator"),
]
COMPILED_SUBS = [(re.compile(regex), repl) for regex, repl in SUBS]

USED_SUBS = set()


def unasync_line(line):
    for index, (regex, repl) in enumerate(COMPILED_SUBS):
        old_line = line
        line = re.sub(regex, repl, line)
        if index not in USED_SUBS:
            if line != old_line:
                USED_SUBS.add(index)
    return line


def unasync_file(in_path, out_path):
    with open(in_path) as in_file:
        with open(out_path, "w", newline="") as out_file:
            for line in in_file.readlines():
                line = unasync_line(line)
                out_file.write(line)


def unasync_file_check(in_path, out_path):
    with open(in_path) as in_file:
        with open(out_path) as out_file:
            for in_line, out_line in zip(in_file.readlines(), out_file.readlines()):
                expected = unasync_line(in_line)
                if out_line != expected:
                    print(f"unasync mismatch between {in_path!r} and {out_path!r}")
                    print(f"Async code:         {in_line!r}")
                    print(f"Expected sync code: {expected!r}")
                    print(f"Actual sync code:   {out_line!r}")
                    sys.exit(1)


def unasync_dir(in_dir, out_dir, check_only=False):
    for dirpath, dirnames, filenames in os.walk(in_dir):
        for filename in filenames:
            if not filename.endswith(".py"):
                continue
            rel_dir = os.path.relpath(dirpath, in_dir)
            in_path = os.path.normpath(os.path.join(in_dir, rel_dir, filename))
            out_path = os.path.normpath(os.path.join(out_dir, rel_dir, filename))
            print(in_path, "->", out_path)
            if check_only:
                unasync_file_check(in_path, out_path)
            else:
                unasync_file(in_path, out_path)


def main():
    check_only = "--check" in sys.argv
    file = sys.argv[1] if len(sys.argv) > 1 else None

    if file:
        import tempfile

        with tempfile.NamedTemporaryFile("w+", delete=False) as temp_file:
            unasync_file(file, temp_file.name)
            print(f"Wrote {temp_file.name}")
        return

    FILES = [
        (
            "hishel/beta/_core/_async/_storages/_sqlite.py",
            "hishel/beta/_core/_sync/_storages/_sqlite.py",
        ),
        (
            "tests/beta/_core/_async/test_sqlite_storage.py",
            "tests/beta/_core/_sync/test_sqlite_storage.py",
        ),
        ("tests/beta/test_async_httpx.py", "tests/beta/test_sync_httpx.py"),
        ("hishel/beta/_async_cache.py", "hishel/beta/_sync_cache.py"),
    ]

    for in_path, out_path in FILES:
        if check_only:
            unasync_file_check(in_path, out_path)
        else:
            unasync_file(in_path, out_path)
            print(f"Wrote {out_path}")

    if len(USED_SUBS) != len(SUBS):
        unused_subs = [SUBS[i] for i in range(len(SUBS)) if i not in USED_SUBS]

        from pprint import pprint

        print("This SUBS was not used")
        pprint(unused_subs)
        exit(1)


if __name__ == "__main__":
    main()
